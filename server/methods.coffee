import Constants from '/imports/constants'
import Incidents from '/imports/collections/incidentReports'
import incidentReportSchema from '/imports/schemas/incidentReport'
import CuratorSources from '/imports/collections/curatorSources'
import { formatUrl, cleanUrl, createIncidentReportsFromEnhancements, regexEscape } from '/imports/utils'

getArticleEnhancements = (article) ->
  check article.url, Match.Maybe(String)
  check article.content, Match.Maybe(String)
  check article.publishDate, Match.Maybe(Date)
  check article.addedDate, Match.Maybe(Date)
  console.log "Calling GRITS API @ " + Constants.GRITS_URL
  params =
    api_key: Constants.GRITS_API_KEY
    returnSourceContent: true
  if article.publishDate or article.addedDate
    params.content_date = moment.utc(
      article.publishDate or article.addedDate
    ).utc().format("YYYY-MM-DDTHH:mm:ss")
  params.split_compound_geonames = true
  if article.content
    params.content = article.content
  else if article.url
    # formatUrl takes a database cleanUrl and adds 'http://'
    params.url = formatUrl(article.url)
  else
    Meteor.Error("InvalidArticle", "Content or a URL must be specified")
  result = HTTP.post(Constants.GRITS_URL + "/api/v1/public_diagnose", params: params)
  if result.data.error
    console.log(result.data.error)
    throw new Meteor.Error("grits-error", result.data.error)
  console.log "success"
  enhancements = result.data
  locationAnnotations = enhancements.features.filter (f) -> f.type == 'location'
  enhancements.features = locationAnnotations.filter (locationAnnotation)->
    loc = locationAnnotation.geoname
    if loc.geonameid
      locationAnnotation.geoname =
        id: loc.geonameid
        name: loc.name
        admin1Name: loc.admin1_name
        admin2Name: loc.admin2_name
        latitude: loc.latitude
        longitude: loc.longitude
        countryName: loc.country_name
        population: loc.population
        featureClass: loc.feature_class
        featureCode: loc.feature_code
        alternateNames: loc.names_used.split(';')
      true
    else
      false
  return enhancements

Meteor.methods
  getArticleEnhancements: (article) ->
    @unblock()
    getArticleEnhancements(article)

  getArticleEnhancementsAndUpdate: (sourceId, params) ->
    @unblock()
    source = CuratorSources.findOne(_id: sourceId)
    enhancements = getArticleEnhancements(source)
    check enhancements, Object
    source.enhancements = enhancements
    source.url = "http://www.promedmail.org/post/#{source._sourceId}"
    CuratorSources.update _id: source._id,
      $set:
        enhancements: enhancements
    options = {}
    options.url = cleanUrl(source.url)
    options.publishDate = source.publishDate
    incidents = createIncidentReportsFromEnhancements(enhancements, options)
    incidents = incidents.map (incident) ->
      incident = _.pick(incident, incidentReportSchema.objectKeys())
    # check for unexpected urls
    if not options.url.startsWith("promedmail.org/post/")
      throw Meteor.Error("Bad url")
    # Remove prior unassociated incident reports for the article
    Incidents.remove(
      url: $regex: regexEscape(options.url) + "$"
      userEventId: $exists: false
      autogenerated: $ne: false
    )
    incidents.forEach (incident) ->
      incidentReportSchema.validate(incident)
      incident.addedDate = new Date()
      Incidents.insert(incident)
    return source
